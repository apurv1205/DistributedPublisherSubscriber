# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pr.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pr.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x08pr.proto\"(\n\ttopicData\x12\r\n\x05topic\x18\x01 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\t\"2\n\x0etopicSubscribe\x12\r\n\x05topic\x18\x01 \x01(\t\x12\x11\n\tclient_ip\x18\x02 \x01(\t\"\x16\n\x05topic\x12\r\n\x05topic\x18\x01 \x01(\t\"\x11\n\x03ips\x12\n\n\x02ip\x18\x01 \x01(\t\"\x1a\n\x0b\x41\x63knowledge\x12\x0b\n\x03\x61\x63k\x18\x01 \x01(\t\"\x07\n\x05\x65mpty2\xf7\x01\n\x0cPublishTopic\x12,\n\x0epublishRequest\x12\n.topicData\x1a\x0c.Acknowledge\"\x00\x12\x33\n\x10subscribeRequest\x12\x0f.topicSubscribe\x1a\x0c.Acknowledge\"\x00\x12\x1b\n\x07giveIps\x12\x06.topic\x1a\x04.ips\"\x00\x30\x01\x12%\n\x07publish\x12\n.topicData\x1a\x0c.Acknowledge\"\x00\x12\x1c\n\ngetFrontIp\x12\x06.empty\x1a\x04.ips\"\x00\x12\"\n\nregisterIp\x12\x04.ips\x1a\x0c.Acknowledge\"\x00\x62\x06proto3')
)




_TOPICDATA = _descriptor.Descriptor(
  name='topicData',
  full_name='topicData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic', full_name='topicData.topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='data', full_name='topicData.data', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=12,
  serialized_end=52,
)


_TOPICSUBSCRIBE = _descriptor.Descriptor(
  name='topicSubscribe',
  full_name='topicSubscribe',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic', full_name='topicSubscribe.topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='client_ip', full_name='topicSubscribe.client_ip', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=54,
  serialized_end=104,
)


_TOPIC = _descriptor.Descriptor(
  name='topic',
  full_name='topic',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='topic', full_name='topic.topic', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=106,
  serialized_end=128,
)


_IPS = _descriptor.Descriptor(
  name='ips',
  full_name='ips',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='ips.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=130,
  serialized_end=147,
)


_ACKNOWLEDGE = _descriptor.Descriptor(
  name='Acknowledge',
  full_name='Acknowledge',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ack', full_name='Acknowledge.ack', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=149,
  serialized_end=175,
)


_EMPTY = _descriptor.Descriptor(
  name='empty',
  full_name='empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=177,
  serialized_end=184,
)

DESCRIPTOR.message_types_by_name['topicData'] = _TOPICDATA
DESCRIPTOR.message_types_by_name['topicSubscribe'] = _TOPICSUBSCRIBE
DESCRIPTOR.message_types_by_name['topic'] = _TOPIC
DESCRIPTOR.message_types_by_name['ips'] = _IPS
DESCRIPTOR.message_types_by_name['Acknowledge'] = _ACKNOWLEDGE
DESCRIPTOR.message_types_by_name['empty'] = _EMPTY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

topicData = _reflection.GeneratedProtocolMessageType('topicData', (_message.Message,), dict(
  DESCRIPTOR = _TOPICDATA,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:topicData)
  ))
_sym_db.RegisterMessage(topicData)

topicSubscribe = _reflection.GeneratedProtocolMessageType('topicSubscribe', (_message.Message,), dict(
  DESCRIPTOR = _TOPICSUBSCRIBE,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:topicSubscribe)
  ))
_sym_db.RegisterMessage(topicSubscribe)

topic = _reflection.GeneratedProtocolMessageType('topic', (_message.Message,), dict(
  DESCRIPTOR = _TOPIC,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:topic)
  ))
_sym_db.RegisterMessage(topic)

ips = _reflection.GeneratedProtocolMessageType('ips', (_message.Message,), dict(
  DESCRIPTOR = _IPS,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:ips)
  ))
_sym_db.RegisterMessage(ips)

Acknowledge = _reflection.GeneratedProtocolMessageType('Acknowledge', (_message.Message,), dict(
  DESCRIPTOR = _ACKNOWLEDGE,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:Acknowledge)
  ))
_sym_db.RegisterMessage(Acknowledge)

empty = _reflection.GeneratedProtocolMessageType('empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'pr_pb2'
  # @@protoc_insertion_point(class_scope:empty)
  ))
_sym_db.RegisterMessage(empty)



_PUBLISHTOPIC = _descriptor.ServiceDescriptor(
  name='PublishTopic',
  full_name='PublishTopic',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=187,
  serialized_end=434,
  methods=[
  _descriptor.MethodDescriptor(
    name='publishRequest',
    full_name='PublishTopic.publishRequest',
    index=0,
    containing_service=None,
    input_type=_TOPICDATA,
    output_type=_ACKNOWLEDGE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='subscribeRequest',
    full_name='PublishTopic.subscribeRequest',
    index=1,
    containing_service=None,
    input_type=_TOPICSUBSCRIBE,
    output_type=_ACKNOWLEDGE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='giveIps',
    full_name='PublishTopic.giveIps',
    index=2,
    containing_service=None,
    input_type=_TOPIC,
    output_type=_IPS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='publish',
    full_name='PublishTopic.publish',
    index=3,
    containing_service=None,
    input_type=_TOPICDATA,
    output_type=_ACKNOWLEDGE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getFrontIp',
    full_name='PublishTopic.getFrontIp',
    index=4,
    containing_service=None,
    input_type=_EMPTY,
    output_type=_IPS,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='registerIp',
    full_name='PublishTopic.registerIp',
    index=5,
    containing_service=None,
    input_type=_IPS,
    output_type=_ACKNOWLEDGE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PUBLISHTOPIC)

DESCRIPTOR.services_by_name['PublishTopic'] = _PUBLISHTOPIC

# @@protoc_insertion_point(module_scope)
